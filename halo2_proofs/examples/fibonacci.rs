use std::marker::PhantomData;

use group::ff::Field;
use halo2_proofs::{
    circuit::{AssignedCell, Chip, Layouter, Region, SimpleFloorPlanner, Value},
    plonk::{Advice, Circuit, Column, ConstraintSystem, Error, Fixed, Instance, Selector},
    poly::Rotation,
};

// ANCHOR: instructions
trait FiboInstructions<F: Field>: Chip<F> {
    /// Variable representing a number.
    type Num;

    // /// Loads a number into the circuit as a private input.
    // /// load_private 需要layouter 中的assign_region, assign_table, constrain_instance
    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>, b:Value<F>) -> Result<(Self::Num, Self::Num), Error>;

    // /// Loads a number into the circuit as a fixed constant.
    // fn load_constant(&self, layouter: impl Layouter<F>, constant: F) -> Result<Self::Num, Error>;

    /// Returns `c = a + b`. 
    /// 非约束版本的数值计算。
    fn add(
        &self,
        layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<(Self::Num, Self::Num), Error>;


    /// Exposes a number as a public input to the circuit.
    fn expose_public(
        &self,
        layouter: impl Layouter<F>,
        num: Self::Num,
        row: usize,
    ) -> Result<(), Error>;
}
// ANCHOR_END: instructions

// ANCHOR: chip
/// The chip that will implement our instructions! Chips store their own
/// config, as well as type markers if necessary.
struct FiboChip<F: Field>  {
    config: FiboConfig, //FiboConfig 说明需要多少个adive, instance 和Fixed 列
    _marker: PhantomData<F>,
}
// ANCHOR_END: chip

// ANCHOR: chip-config
/// Chip state is stored in a config struct. This is generated by the chip
/// during configuration, and then stored inside the chip.
#[derive(Clone, Debug)]
struct FiboConfig {
    /// For this chip, we will use two advice columns to implement our instructions.
    /// These are also the columns through which we communicate with other parts of
    /// the circuit.
    advice: [Column<Advice>; 3], 

    /// This is the public input (instance) column.
    instance: Column<Instance>,

    // We need a selector to enable the multiplication gate, so that we aren't placing
    // any constraints on cells where `NumericInstructions::mul` is not being used.
    // This is important when building larger circuits, where columns are used by
    // multiple sets of instructions.
    s_add: Selector,
}

impl<F: Field> FiboChip<F> {
    //construct 配置chip 的静态配置
    fn construct(config: <Self as Chip<F>>::Config) -> Self {  
        Self {
            config,
            _marker: PhantomData,
        }
    }

    //配置chip 
    fn configure(
        meta: &mut ConstraintSystem<F>,  //meta = arkworks中的cs
        advice: [Column<Advice>; 3],
        instance: Column<Instance>,
        // constant: Column<Fixed>,
    ) -> <Self as Chip<F>>::Config {
        meta.enable_equality(instance); //启用 instance 和 constant 列以用于约束。
        // meta.enable_constant(constant);
        for column in &advice {
            meta.enable_equality(*column);  //遍历 advice 列表中的每个列，并启用它们以用于约束。
        }
        let s_add = meta.selector();

        // Define our multiplication gate!
        //create_gate 创建custom gate, 这里的作用是, gate是约束的实现。
        meta.create_gate("add", |meta| {
            // To implement multiplication, we need three advice cells and a selector
            // cell. We arrange them like so:
            //
            // | a0  | a1  | out ｜s_add |
            // |-----|-----|-----｜------|
            // | lhs | rhs | out | s_add |
            //
            // Gates may refer to any relative offsets we want, but each distinct
            // offset adds a cost to the proof. The most common offsets are 0 (the
            // current row), 1 (the next row), and -1 (the previous row), for which
            // `Rotation` has specific constructors.
            let lhs = meta.query_advice(advice[0], Rotation::cur());
            let rhs = meta.query_advice(advice[1], Rotation::cur());
            let out = meta.query_advice(advice[2], Rotation::cur());
            println!("lhs:{:?}, rhs:{:?}, out:{:?}", lhs, rhs, out);
            let s_add = meta.query_selector(s_add);

            // Finally, we return the polynomial expressions that constrain this gate.
            // For our multiplication gate, we only need a single polynomial constraint.
            //
            // The polynomial expressions returned from `create_gate` will be
            // constrained by the proving system to equal zero. Our expression
            // has the following properties:
            // - When s_mul = 0, any value is allowed in lhs, rhs, and out.
            // - When add != 0, this constrains lhs + rhs = out.
            vec![s_add * (lhs + rhs - out)] 
        });

        FiboConfig {
            advice,
            instance,
            s_add,
        }
    }
}
// ANCHOR_END: chip-config

// ANCHOR: chip-impl
impl<F: Field> Chip<F> for FiboChip<F> {
    type Config = FiboConfig;
    type Loaded = (); //综合时需要,可以理解为chip的初始状态

    fn config(&self) -> &Self::Config {
        &self.config
    }

    fn loaded(&self) -> &Self::Loaded {
        &()  //返回对空元组的不可变引用。
    }
}
// ANCHOR_END: chip-impl

// ANCHOR: instructions-impl
/// A variable representing a number.
#[derive(Clone)]
struct Number<F: Field>(AssignedCell<F, F>);  

// FiboChip 实现 NumericInstructions
impl<F: Field> FiboInstructions<F> for FiboChip<F> {
    type Num = Number<F>;  //Number<F>是

    fn load_private(
        &self,
        mut layouter: impl Layouter<F>,
        a: Value<F>,
        b: Value<F>,
    ) -> Result<(Self::Num, Self::Num), Error> {
        let config = self.config();

        //load_private 调用layouter中的assign_region, assign_region调用 
        layouter.assign_region(
            || "load private",
            |mut region|{
               let a_cell =  region
                    .assign_advice(|| "input a ", config.advice[0], 0, || a).map(Number)?;
               let b_cell =  region
                    .assign_advice(|| "input b",  config.advice[1], 0, || b).map(Number)?;
                Ok((a_cell, b_cell))
            },
        )
    }


    fn add(
        &self,
        mut layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<(Self::Num, Self::Num), Error> {
        let config = self.config();

        layouter.assign_region(
            || "add",
            |mut region: Region<'_, F>| {
                // We only want to use a single multiplication gate in this region,
                // so we enable it at region offset 0; this means it will constrain
                // cells at offsets 0 and 1.
                config.s_add.enable(&mut region, 0)?; //

                // The inputs we've been given could be located anywhere in the circuit,
                // but we can only rely on relative offsets inside this region. So we
                // assign new cells inside the region and constrain them to have the
                // same values as the inputs.
                // 将a.0 复制到 第0行，config.advice[0]列
                // 将b.0 复制到 第0行，config.advice[1]列
                let new_a = a.0.copy_advice(|| "a", &mut region, config.advice[0], 0).map(Number)?;  //config.advice[0]列的第[0]行的值 = a.0
                let new_b = b.0.copy_advice(|| "b", &mut region, config.advice[1], 0).map(Number)?;  //config.advice[1]列的第[0]行的值 = a.0

                // Now we can assign the multiplication result, which is to be assigned
                // into the output position.
                let value = a.0.value().copied() + b.0.value();

                // Finally, we do the assignment to the output, returning a
                // variable to be used in another part of the circuit.
                // Result 类型具有 map 方法，它允许您在 Result 包含成功值时对其进行操作，而忽略错误值。map 方法的作用是将 Result 中的成功值（Ok 的部分）应用于一个函数，并返回一个新的 Result，其中包含函数的返回值。如果 Result 包含错误值（Err 的部分），则 map 方法不执行任何操作，仅将错误值传递给新的 Result。
                // assign_advice 的结果是 AssignedCell，再使用map 将其转换成Number类型, Number是一个AssignedCell的元组包装类型
                let new_c = region
                    .assign_advice(|| "a + b", config.advice[2], 0, || value)
                    .map(Number)?;
                
                println!("new_a:{:?}, new_b:{:?}, new_c:{:?}", new_a.0, new_b.0, new_c.0);

                Ok((new_b,new_c))
            },
        )
    }


    // 约束num所在的Cell === 第row行，第config.instance 列
    fn expose_public(
        &self,
        mut layouter: impl Layouter<F>,
        num: Self::Num,
        row: usize,
    ) -> Result<(), Error> {
        let config = self.config();

        layouter.constrain_instance(num.0.cell(), config.instance, row)
    }
}
// ANCHOR_END: instructions-impl

// ANCHOR: circuit
/// The full circuit implementation.
///
/// In this struct we store the private input variables. We use `Option<F>` because
/// they won't have any value during key generation. During proving, if any of these
/// were `None` we would get an error.
#[derive(Default)]
struct FiboCircuit<F: Field> {
    iter: usize,
    a: Value<F>,
    b: Value<F>,
}

impl<F: Field> Circuit<F> for FiboCircuit<F> {
    // Since we are using a single chip for everything, we can just reuse its config.
    //此电路只包含一个chip，因此可以复用它的config
    type Config = FiboConfig;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self::default()
    }
    //把本电路的的config，为chip 分配资源。
    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        // We create the two advice columns that FiboChip uses for I/O.
        let advice = [meta.advice_column(), meta.advice_column(), meta.advice_column()];

        // We also need an instance column to store public inputs.
        let instance = meta.instance_column();

        // Create a fixed column to load constants,分配一个cosntant 列
        // let constant = meta.fixed_column();

        FiboChip::configure(meta, advice, instance)
    }
    
    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        // 构建一个chip
        let fibo_chip = FiboChip::<F>::construct(config);

        // Load our private values into the circuit.
        let (mut a,mut b) = fibo_chip.load_private(layouter.namespace(|| "load a and b"), self.a, self.b)?;
        // let b = fibo_chip.load_private(layouter.namespace(|| "load b"), self.b)?;
    
        for i in 2..self.iter {
            let (new_b, new_c) = fibo_chip.add(layouter.namespace(|| format!("iter {}",i)), a, b)?;
            a = new_b;
            b = new_c;
        }
     
        // Expose the result as a public input to the circuit.
        fibo_chip.expose_public(layouter.namespace(|| "expose c"), b, 0)
    }
}
// ANCHOR_END: circuit

fn main(){}

#[cfg(test)]
mod tests {

    use super::*;
    use halo2_proofs::{dev::MockProver, pasta::Fp};

    fn fibonacci<F:Field>(a:F, b:F, iter:usize) -> F {
        assert!(iter >=2);

        let mut a = a;
        let mut b = b;
        let mut c = a + b;

        for _ in 2..iter {
            c = a + b;
            a = b;
            b = c;
        }
        c
    }

    fn power_ceil(x:usize) ->usize{
        let mut k = 0;
        let mut res = 1;

        while res <= x {
            res <<=1;
            k +=1; // 左移一位，相当于乘以2
        }
        k
    }

    #[test]
    fn test_fibonacci() {
        let a = Fp::from(1);
        let b = Fp::from(1);
        let c = fibonacci(a, b, 10);
        assert_eq!(c, Fp::from(55));
    }

    #[test]
    fn test_power_ceil() {
        let c = power_ceil(10);
        assert_eq!(c, 4);
    }


    #[test]
    fn test_circuit() {
        // Prepare the private and public inputs to the circuit!
        let a = 1; 
        let b = 1;
        let iter = 50;

        let k = power_ceil(iter)+1; //for simplity

        let a = Fp::from(a);
        let b = Fp::from(b);
        let c = fibonacci(a, b, iter);
        // println!("iter:{}",iter);
        // println!("k {}",k);
        // println!("c:{:?}",c);

        // Instantiate the circuit with the private inputs.
        let circuit = FiboCircuit {
            iter:iter,
            a: Value::known(a),  //对Value的赋值语句
            b: Value::known(b),
        };

        // Arrange the public input. We expose the multiplication result in row 0
        // of the instance column, so we position it there in our public inputs.
        let public_inputs = vec![c];

        // Given the correct public input, our circuit will verify.
        let prover = MockProver::run(k as u32, &circuit, vec![public_inputs.clone()]).unwrap();
        prover.assert_satisfied();
  

        // If we try some other public input, the proof will fail!
        // public_inputs[0] += Fp::one();
        // let prover = MockProver::run(k, &circuit, vec![public_inputs]).unwrap();
        // assert!(prover.verify().is_err());
    }
}
